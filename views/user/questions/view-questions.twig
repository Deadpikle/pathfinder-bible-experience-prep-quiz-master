{% extends "layouts/main.twig" %}

{% block headers %}

<!-- https://github.com/Dogfalo/materialize/issues/1376 -->
<style type="text/css">
    [type="checkbox"]:not(:checked), [type="checkbox"]:checked {
        position: static;
        left: 0px; 
        opacity: 1; 
    }
</style>

{% include 'includes/scripts/datatables.twig' %}

{% endblock %}

{% block content %}

<p><a class="btn-flat blue-text waves-effect waves-blue no-uppercase" href="{{ app.yurl('/') }}">Back</a></p>

<h3>Questions</h3>

{% if not app.isGuest %}
    <div id="create" class="row">
        <div class="col s12"> 
            <a class="waves-effect waves-light btn" href="{{ app.yurl('/questions/add') }}">Add Question</a>
        </div>
    </div>
{% endif %}

<div id="question-type-choice">
    <a id="bible-qna" class="btn-flat blue white-text">Bible Q&amp;A</a>
    <a id="commentary-qna" class="btn-flat waves-effect waves-blue">Commentary Q&amp;A</a>
</div>

<div id="display-types">
    <a id="all-questions" class="btn-flat blue white-text">All</a>
    <a id="recently-added-questions" class="btn-flat waves-effect waves-blue">Recently Added</a>
    <a id="flagged-questions" class="btn-flat waves-effect waves-blue">Flagged</a>
</div>

<div class="row" id="language-select-container">
    <div class="input-field col s12 m4">
        <select id="language-select">
            {% for language in languages %}
                {% set selected = language.languageID == userLanguage.languageID ? 'selected' : '' %}
                <option value="{{ language.languageID }}" {{ selected }}>{{ language.getDisplayName() }}</option>
            {% endfor %}
            <option value="-1">No language filter</option>
        </select>
        <label for="language-select">Filter by language</label>
    </div>
</div>

<div class="divider"></div>

<div id="questions-table">
    <table id="questions" class="striped responsive-table">
        <thead>
            <tr id="table-header-row">
            </tr>
        </thead>
        <tbody id="questions-body">
        </tbody>
    </table>
</div>

<div id="loading-bar" class="preloader-wrapper active">
    <div class="spinner-layer spinner-blue-only">
        <div class="circle-clipper left">
            <div class="circle"></div>
        </div>
        <div class="gap-patch">
            <div class="circle"></div>
        </div>
        <div class="circle-clipper right">
            <div class="circle"></div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var books = {{ json_encode(bookData) | raw }};
    var volumes = {{ json_encode(volumes) | raw }};
    var isAdmin = {{ app.isAdmin ? 'true' : 'false' }};
    var isGuestMode = {{ app.isGuest ? 'true' : 'false' }};
    var questionURLBase = '{{ app.yurl('/questions/') }}';
    $(document).ready(function() {

        var questionType = 'bible-qna';
        var questionFilter = 'all';
        var pageSize = {{ app.isGuest ? 100 : 9999 }};
        var currentPageNumber = 0;
        var maxPageNumber = 0;
        var bookIndex = 0;
        var chapterIndex = 0;
        var bookFilter = -1;
        var chapterFilter = -1;
        var volumeFilter = -1;
        var searchText = '';
        var table = null;

        function moveToPage(pageNumber) {
            currentPageNumber = pageNumber;
            loadQuestions(questionFilter);
        }

        function loadQuestions() {
            $("#questions").hide();
            $("#loading-bar").show();
            $.ajax({
                type: 'POST',
                url: '{{ app.yurl('/questions/load') }}',
                data: {
                    questionType: questionType,
                    questionFilter: questionFilter,
                    pageSize: pageSize,
                    pageOffset: 0,//currentPageNumber * pageSize,
                    bookFilter: -1,
                    chapterFilter: -1,
                    volumeFilter: -1,
                    searchText: '',
                    languageID: $("#language-select").val()
                },
                success: function(response) {
                    if (typeof response == 'undefined') {
                        showLoadError(response);
                    }
                    else {
                        try {
                            //console.log(response);
                            var data = JSON.parse(response);
                            console.log(data);
                            setupTable(data.questions);
                            var totalQuestions = data.questions.length != 0 ? data.questions.length : 0;
                            maxPageNumber = totalQuestions != 0 ? Math.ceil(data.totalQuestions / pageSize) - 1 : 0;
                            
                            {% if not app.isGuest %}
                                datatablesProps.columnDefs = [
                                    { orderable: false, targets: [-1, -2] }
                                ];
                            {% endif %}
                            datatablesProps.language = {
                                searchPlaceholder: 'Search questions...'
                            };
                            datatablesProps.order = [[3, 'asc'], [0, 'asc'], [4, 'asc']];
                            //datatablesProps.destroy = true;
                            table = $('#questions').DataTable(datatablesProps);
                        } catch (e) {
                            showLoadError(e);
                        }
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    showLoadError("");
                }
            });
        }

        function showLoadError(error) {
            var $questionsBody = $("#questions-body");
            $questionsBody.empty();
            alert("Unable to load questions. Please make sure you are connected to the internet or try again later.");
            if (error) {
                console.log(error);
            }
        }

        function resetTable() {
            if (table !== null) {
                table.clear().destroy();
                table = null;
            }
        }

        function setupTableHeader(questionType) {
            resetTable();
            var $tableHeaderRow = $('#table-header-row');
            $tableHeaderRow.empty();
            var html = '';
            if (isBibleQuestion(questionType)) {
                html += '<th>Question</th>';
                html += '<th>Answer</th>';
                html += '<th class="nowrap">Fill-in?</th>';
                html += '<th>Start</th>';
                html += '<th>End</th>';
                html += '<th>Points</th>';
                html += '<th>Language</th>';
            }
            else if (isCommentaryQuestion(questionType)) {
                html += '<th>Question</th>';
                html += '<th>Answer</th>';
                html += '<th class="nowrap">Fill-in?</th>';
                html += '<th>Volume</th>';
                html += '<th>Points</th>';
                html += '<th>Language</th>';
            }
            if (isAdmin && !isGuestMode) {
                html += '<th></th>';
                html += '<th></th>';
            }
            $tableHeaderRow.append(html);
        }

        function emptyQuestionBody() {
            var $questionsBody = $("#questions-body");
            $questionsBody.empty();
        }

        function setupTable(questions) {
            var $questionsBody = $("#questions-body");
            emptyQuestionBody();

            var unchecked = "";
            var checked = "(Fill-In)";

            for (var i = 0; i < questions.length; i++) {
                var question = questions[i];
                var id = question.QuestionID;
                var html = '<tr>';
                var isFillIn = isFillInQuestion(question.Type);
                var checkboxTypeForFillIn = isFillIn ? checked : unchecked;
                var answer = isFillIn ? "[Fill in the blanks]" : question.Answer;
                var languageName = question.LanguageName;
                if (question.LanguageAltName != '') {
                    languageName += ' (' + question.LanguageAltName + ')';
                }
                if (isBibleQuestion(question.Type)) {
                    var startVerse = question.StartBook + " " + question.StartChapter + ":" + question.StartVerse;
                    var endVerse = "";
                    var endVerseDataSort = "";
                    if (typeof question.EndVerse !== 'undefined' && question.EndVerse != null && question.EndVerse != "") {
                        endVerse = question.EndBook + " " + question.EndChapter + ":" + question.EndVerse;
                        endVerseDataSort = padZeros(question.EndBibleOrder, 3) + '-' + question.EndBook + '-' + padZeros(question.EndChapter, 3) + 
                            padZeros(question.EndVerse, 3);
                    }
                    html += '<td>' + question.Question + '</td>';
                    html += '<td>' + answer + '</td>';
                    html += '<td>' + checkboxTypeForFillIn + '</td>';
                    var startVerseDataSort = padZeros(question.StartBibleOrder, 3) + '-' + question.StartBook + '-' + 
                        padZeros(question.StartChapter, 3) + 
                        padZeros(question.StartVerse, 3);
                        padZeros(question.StartVerse, 3);
                    html += '<td data-sort="' + startVerseDataSort + '">' + startVerse + '</td>';
                    html += '<td data-sort="' + endVerseDataSort + '">' + endVerse + '</td>';
                    html += '<td>' + question.NumberPoints + '</td>';
                    html += '<td>' + languageName + '</td>';
                }
                else if (isCommentaryQuestion(question.Type)) {
                    var volume = commentaryVolumeString(question.CommentaryVolume, question.CommentaryStartPage, question.CommentaryEndPage);
                    volume += ' - ' + question.TopicName;
                    html += '<td>' + question.Question + '</td>';
                    html += '<td>' + answer + '</td>';
                    html += '<td>' + checkboxTypeForFillIn + '</td>';
                    var volumeDataSort = padZeros(question.CommentaryVolume, 2) + '-' + padZeros(question.CommentaryStartPage, 3) + 
                        padZeros(question.CommentaryEndPage, 3);
                    html += '<td data-sort="' + volumeDataSort + '">' + volume + '</td>';
                    html += '<td>' + question.NumberPoints + '</td>';
                    html += '<td>' + languageName + '</td>';
                }
                if (isAdmin && !isGuestMode) {
                    html += '<td><a class="waves-effect waves-light btn" href="' + questionURLBase + id + '/edit">Edit</a></td>';
                    html += '<td><a class="waves-effect waves-light btn red" href="' + questionURLBase + id + '/delete">Delete</a></td>';
                }
                html += '</tr>';
                $questionsBody.append(html);
            }
            $("#questions").show();
            $("#loading-bar").hide();
        }

        function setQuestionSelectorSelected(element) {
            $(element).attr("class", "btn-flat blue white-text");
        }

        function resetQuestionTypeSelectorClasses() {
            $(bibleQnA).attr("class", "btn-flat waves-effect waves-blue");
            $(commentaryQnA).attr("class", "btn-flat waves-effect waves-blue");
        }

        function resetQuestionFilterSelectorClasses() {
            $(all).attr("class", "btn-flat waves-effect waves-blue");
            $(recent).attr("class", "btn-flat waves-effect waves-blue");
            $(flagged).attr("class", "btn-flat waves-effect waves-blue");
        }

        function questionTypeSelectorClicked(questionTypeSelected, element) {
            if (questionType != questionTypeSelected) {
                questionType = questionTypeSelected;
                currentPageNumber = 0;
                resetTable();
                resetQuestionTypeSelectorClasses();
                setQuestionSelectorSelected(element);
                emptyQuestionBody();
                setupTableHeader(questionTypeSelected);
                loadQuestions();
            }
        }

        function questionFilterSelectorClicked(questionFilterSelected, element) {
            if (questionFilter != questionFilterSelected) {
                questionFilter = questionFilterSelected;
                currentPageNumber = 0;
                resetTable();
                resetQuestionFilterSelectorClasses();
                setQuestionSelectorSelected(element);
                emptyQuestionBody();
                loadQuestions();
            }
        }

        var bibleQnA = document.getElementById('bible-qna');
        var commentaryQnA = document.getElementById('commentary-qna');
        bibleQnA.addEventListener('click', function() {
            questionTypeSelectorClicked("bible-qna", bibleQnA);
        }, false);
        commentaryQnA.addEventListener('click', function() {
            questionTypeSelectorClicked('commentary-qna', commentaryQnA);
        }, false);

        var all = document.getElementById('all-questions');
        var recent = document.getElementById('recently-added-questions');
        var flagged = document.getElementById('flagged-questions');

        all.addEventListener('click', function() {
            questionFilterSelectorClicked("all", all);
        }, false);
        
        recent.addEventListener('click', function() {
            questionFilterSelectorClicked("recent", recent);
        }, false);

        flagged.addEventListener('click', function() {
            questionFilterSelectorClicked("flagged", flagged);
        }, false);

        $("#questions").hide();
        setupTableHeader(questionType);

        // language selector
        $('#language-select').change(function() { 
            resetTable();
            loadQuestions();
        });
        
        $('#language-select').material_select();

        // load questions
        loadQuestions();
    });
</script>

{% endblock %}