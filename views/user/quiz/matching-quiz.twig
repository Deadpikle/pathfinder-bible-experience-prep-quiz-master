{% extends "layouts/main.twig" %}

{% block headers %}

{% include 'includes/scripts/tinysort.twig' %}

{% endblock %}

{% block content %}

<p><a class="btn-flat blue-text waves-effect waves-blue no-uppercase" href="{{ app.yurl('/') }}">Back</a></p>

<h4>Matching Quiz</h4>
<p>Drag items from the question bank on the left to the corresponding matches/answers on the right. Then, to check your answers, click the "Check Answers" button at the bottom. If a match is correct, you will see that item turn green and a <i class="fas fa-check-circle"></i> icon. If the match is not correct, you will see that item turn red and a <i class="fas fa-exclamation-triangle"></i> icon. When you've finished one quiz and you're ready to do a new quiz, just click the "Generate Matching Quiz" button again!</p>

<div class="row mb-0">
    <div class="input-field col s6 m4">
        <select id="question-set" name="question-set" autocomplete="off">
            {% for questionSet in questionSets %}
                <option value="{{ questionSet.matchingQuestionSetID }}">{{ questionSet.name }} ({{ questionSet.questions | length }} possible matches)</option>
            {% endfor %}
        </select>
        <label>* Question Set</label>
    </div>
    <div class="col s6">
        <div class="input-field col s12 m6">
            <input type="number" id="number" name="number" value="10" autocomplete="off" required/>
            <label for="name">* Number of Matches/Questions</label>
        </div>
    </div>
</div>
<div class="row mt-0">
    <div class="col s12">
        <button id="generate-quiz-button" class="btn waves-effect blue">Generate Matching Quiz</button>
    </div>
</div>

<hr/>

<div id="matching-quiz" class="hidden">
    <div class="row">
        <div class="col s6 m4 l4" id="quiz-bank-container">
            <h2>Quiz Bank</h2>
            <ul class="browser-default quiz-bank" id="quiz-bank">

            </ul>
        </div>
        <div class="col s6 m8 l6" id="answers-container">
            <h2>Answers</h2>
            <ul id="answers">
            </ul>
            <button class="btn waves-effect waves-light red right " id="reset-answers-button">Reset Answers</button>
        </div>
    </div>
    <button class="btn waves-effect waves-light submit" id="check-answer-button">Check Answers</button>
</div>

<div class="hidden" id="quiz-bank-item-template">
	<p class="quiz-bank-item"><i class="fas fa-arrows-alt drag-handle"></i><span class="item-text"></span></p>
</div>
<div class="hidden" id="answer-item-template">
	<div class="row answer-item valign-wrapper">
		<div class="col s5 m4">
			<ul class="answer-drop">

			</ul>
		</div>
		<div class="col s7 m8">
			<p class="answer-text-container">
				<span class="answer-text"></span>
				<i class="fas fa-check-circle hidden correct-answer-icon"></i>
				<i class="fas fa-exclamation-triangle hidden wrong-answer-icon"></i>
			</p>
			
		</div>
	</div>
</div>

<script type="text/javascript">
    $('select').material_select();
    fixRequiredSelectorCSS();
	// https://stackoverflow.com/a/2450976/3938401
	function shuffle(array) {
		let currentIndex = array.length,  randomIndex;
		// While there remain elements to shuffle...
		while (currentIndex != 0) {
			// Pick a remaining element...
			randomIndex = Math.floor(Math.random() * currentIndex);
			currentIndex--;

			// And swap it with the current element.
			[array[currentIndex], array[randomIndex]] = [
			array[randomIndex], array[currentIndex]];
		}
		return array;
	}

	var matches = {{ json_encode(matches ?? []) }};
	var quizBankUL = document.getElementById('quiz-bank');
	var answersUL = document.getElementById('answers');
	var checkAnswerButton = document.getElementById('check-answer-button');
    var resetAnswersButton = document.getElementById('reset-answers-button');
    var generateQuizButton = document.getElementById('generate-quiz-button');
    var questionSetSelect = document.getElementById('question-set');
    var numberQuestionsInput = document.getElementById('number');
	var quizBankItemTemplate = document.getElementById('quiz-bank-item-template').firstElementChild;
	var answerItemTemplate = document.getElementById('answer-item-template').firstElementChild;
    var sortables = [];

    generateQuizButton.addEventListener('click', function() {
        $.ajax({
            type: "POST",
            url: '{{ app.yurl('/matching-quiz/generate') }}',
            data: {
                questionSetID: questionSetSelect.value,
                numberQuestions: numberQuestionsInput.value,
                numberSets: 10
            },
            success: function(response) {
                if (response.didSucceed) {
                    clearOldQuiz();
                    showQuiz(response.sets[0]);
                    document.getElementById('matching-quiz').classList.remove('hidden');
                    
                } else {
                    Materialize.toast('Error creating matching question quiz: ' + response.message, 5000);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                try {
                    Materialize.toast(xhr.responseJSON.message, 4000);
                } catch (error) {
                    Materialize.toast('Unknown error generating matching quiz. Please make sure you are connected to the internet or try again later.', 4000);
                }
            }
        });
    });

    function clearOldQuiz() {
        sortables.forEach(function(sortable) {
            sortable.destroy();
        });
        sortables = [];
        quizBankUL.innerHTML = '';
        answersUL.innerHTML = '';
    }

    function showQuiz(matches) {
        matches.forEach(function(item) {
            // setup quiz option
            var quizBankItem = quizBankItemTemplate.cloneNode(true);
            var li = document.createElement('li');
            li.appendChild(quizBankItem);
            var itemTextSpans = li.getElementsByClassName('item-text');
            if (itemTextSpans.length > 0) {
                itemTextSpans[0].innerText = item.question;
            }
            li.classList.add('quiz-list-item');
            li.setAttribute('data-id', item.matchingQuestionItemID);
            quizBankUL.appendChild(li);
        });
        // shuffle answers and display them
        var shuffledMatches = shuffle(matches);
        shuffledMatches.forEach(function(item) {
            // setup answer 
            var answerItem = answerItemTemplate.cloneNode(true);
            var li = document.createElement('li');
            li.appendChild(answerItem);
            var answerTextSpans = li.getElementsByClassName('answer-text');
            if (answerTextSpans.length > 0) {
                answerTextSpans[0].innerText = item.answer;
            }
            li.classList.add('answer-list-item');
            li.setAttribute('data-id', item.matchingQuestionItemID);
            answersUL.appendChild(li);
        });
        // set up sortables
        sortables.push(Sortable.create(quizBankUL, {
            group: {
                name: 'shared'
            },
            handle: '.drag-handle',
            ghostClass: 'sortable-drop-placeholder',
            sort: false, // no sorting within list
            // Element is dropped into the list from another list
            onAdd: function (/**Event*/evt) {
                sortQuizBank();
                clearAllCorrectIncorrect();
            },
        }));
        var answerDrops = document.getElementsByClassName('answer-drop');
        // can't use forEach since getElementsByClassName returns HTMLCollection
        for (var i = 0; i < answerDrops.length; i++) {
            var item = answerDrops[i];
            sortables.push(Sortable.create(item, {
                group: {
                    name: 'shared',
                    put: function (to) {
                        return to.el.children.length < 1; // max 1 item in list
                    }
                },
                handle: '.drag-handle',
                easing: 'cubic-bezier(1, 0, 0, 1)',
                ghostClass: 'sortable-drop-placeholder',
                onSort: function (/**Event*/evt) {
                    // same properties as onEnd
                    clearAllCorrectIncorrect();
                },

                // Element is removed from the list into another list
                onRemove: function (/**Event*/evt) {
                    // same properties as onEnd
                    clearAllCorrectIncorrect();
                },
            }));
        };
        sortQuizBank();
    }

    function sortQuizBank() {
        tinysort(quizBankUL.children, 'span.item-text');
    }

    function clearAllCorrectIncorrect() {
		var answerListItems = answersUL.getElementsByClassName('answer-list-item');
		for (var i = 0; i < answerListItems.length; i++) {
			var answerListItem = answerListItems[i];
			var answerItemContainers = answerListItem.getElementsByClassName('answer-item');
			if (answerItemContainers.length > 0) {
				// clear any old CSS answers
				answerItemContainers[0].classList.remove('correct-quiz-answer');
				answerItemContainers[0].querySelector('.correct-answer-icon').classList.add('hidden');
				answerItemContainers[0].classList.remove('wrong-quiz-answer');
				answerItemContainers[0].querySelector('.wrong-answer-icon').classList.add('hidden');
            }
        }
    }

	function checkAnswers() {
		// check answers by looking at the answer <li> vs the quiz bank <li>.
		// if the data-id attribute matches, then the answer is correct :)
        clearAllCorrectIncorrect();
		var answerListItems = answersUL.getElementsByClassName('answer-list-item');
		for (var i = 0; i < answerListItems.length; i++) {
			var answerListItem = answerListItems[i];
			var answerDataID = answerListItem.getAttribute('data-id');
			var answerItemContainers = answerListItem.getElementsByClassName('answer-item');
			if (answerItemContainers.length > 0) {
				// check if user has matched an item at all
				var quizBankListItems = answerListItem.getElementsByClassName('quiz-list-item');
				if (quizBankListItems.length === 0) {
					// if not matched at all, it's wrong by default
					answerItemContainers[0].classList.add('wrong-quiz-answer');
					answerItemContainers[0].querySelector('.wrong-answer-icon').classList.remove('hidden');
				} else {
					// see if answer right
					var quizBankListItem = quizBankListItems[0];
					var quizBankDataID = quizBankListItem.getAttribute('data-id');
					if (quizBankDataID === answerDataID) {
						// answer is right!
						answerItemContainers[0].classList.add('correct-quiz-answer');
						answerItemContainers[0].querySelector('.correct-answer-icon').classList.remove('hidden');
					} else {
						answerItemContainers[0].classList.add('wrong-quiz-answer');
						answerItemContainers[0].querySelector('.wrong-answer-icon').classList.remove('hidden');
					}
				}
			}
		}
	}

	checkAnswerButton.addEventListener('click', function() {
		checkAnswers();
	});

    resetAnswersButton.addEventListener('click', function() {
        if (confirm('Are you sure you want to reset your matches? You can\'t undo this action!')) {
            var answerListItems = answersUL.getElementsByClassName('answer-list-item');
            for (var i = 0; i < answerListItems.length; i++) {
                var answerListItem = answerListItems[i];
                var answerItemContainers = answerListItem.getElementsByClassName('answer-item');
                if (answerItemContainers.length > 0) {
                    // check if user has matched an item at all
                    var quizBankListItems = answerListItem.getElementsByClassName('quiz-list-item');
                    if (quizBankListItems.length > 0) {
                        quizBankListItem = quizBankListItems[0];
                        quizBankListItem.parentNode.removeChild(quizBankListItem);
                        quizBankUL.appendChild(quizBankListItem);
                        sortQuizBank();
                    }
                }
            }
            clearAllCorrectIncorrect();
        }
    });

</script>

{% endblock %}