{% extends "layouts/main.twig" %}

{% block headers %}

{% include 'includes/scripts/select2.twig' %}
{% include 'includes/scripts/sortable.twig' %}
{% include 'includes/scripts/tinysort.twig' %}

{% endblock %}

{% block content %}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="{{ app.yurl('/') }}">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Matching Quiz</li>
    </ol>
</nav>

<h1 class="matching-quiz-page-title">Matching Quiz</h1>
<p class="mb-1">Drag items from the question bank on the left to the corresponding matches/answers on the right. Then, to check your answers, click the "Check Answers" button at the bottom. If a match is correct, you will see that item turn green and a <i class="fas fa-check-circle"></i> icon. If the match is not correct, you will see that item turn red and a <i class="fas fa-exclamation-triangle"></i> icon. When you've finished one quiz and you're ready to do a new quiz, just click the "Generate Matching Quiz" button again!</p>
<p class="mb-1"><em>There are {{ (questionSets | length) + (fillInData | length) }} question set{{ (questionSets | length) + (fillInData | length) == 1 ? '' : 's' }} available for matching quizzes.</em></p>

<div class="row mb-0">
    <div class="form-group col-sm-6 col-md-4">
        <label>* Question Set</label>
        <select id="question-set" class="form-control" name="question-set" autocomplete="off">
            <optgroup label="Matches by Topic">
                {% for questionSet in questionSets %}
                    <option value="set|{{ questionSet.matchingQuestionSetID }}">{{ questionSet.name }} ({{ questionSet.questions | length }} possible matches)</option>
                {% endfor %}
            </optgroup>
            <optgroup label="Verse Matching">
                {% for fillInDataItem in fillInData %}
                    {% if fillInDataItem.numberOfQuestions > 0 %}
                        <option value="fill|{{ fillInDataItem.chapterID }}|{{ fillInDataItem.language.languageID }}">{{ fillInDataItem.bookName }} {{ fillInDataItem.chapterNumber }} ({{ fillInDataItem.numberOfQuestions }} verses) [{{ fillInDataItem.language.name }}]</option>
                    {% endif %}
                {% endfor %}
            </optgroup>
        </select>
    </div>
    <div class="col-sm-3 col-md-4">
        <div class="form-group">
            <label for="sets">* Max Number of Matching Sets</label>
            <input type="number" class="form-control" id="sets" name="sets" value="5" min="1" max="50" placeholder="5" autocomplete="off" required>
        </div>
    </div>
    <div class="col-sm-3 col-md-4">
        <div class="form-group">
            <label for="number">* Max Number of Matches per Matching Set</label>
            <input type="number" class="form-control" id="number" name="number" value="5" min="1" max="999" placeholder="5" autocomplete="off" required>
        </div>
    </div>
</div>
<div class="row mt-1">
    <div class="col-sm-6">
        <button id="generate-quiz-button" class="btn btn-sm btn-primary"><i class="fas fa-tasks"></i> Generate Matching Quiz</button>
    </div>
</div>

<hr/>

<div id="matching-quiz-container" class="hidden">
</div>

<div class="hidden" id="matching-quiz-template">
    <div> {# wrapper div for easier copying since we use the first element child #}
        <h2 class="matching-quiz-set-title">Set <span class="set-title"></span></h2>
        <div class="row">
            <div class="col-sm-6 col-md-4 col-lg-4 quiz-bank-container">
                <h3 class="matching-quiz-col-title">Quiz Bank</h3>
                <ul class="browser-default quiz-bank">
                </ul>
                <button class="btn btn-sm btn-info check-answer-button"><i class="fas fa-clipboard-check"></i> Check Answers</button>
            </div>
            <div class="col-sm-6 col-md-8 col-lg-6 answers-container">
                <h3 class="matching-quiz-col-title">Answers</h3>
                <ul class="answers">
                </ul>
                <button class="btn btn-sm btn-warning reset-answers-button"><i class="fas fa-exclamation-triangle"></i> Reset Answers</button>
            </div>
        </div>
    </div>
</div>

<div class="hidden" id="quiz-bank-item-template">
	<p class="quiz-bank-item"><i class="fas fa-arrows-alt drag-handle"></i><span class="item-text"></span></p>
</div>
<div class="hidden" id="answer-item-template">
	<div class="row answer-item valign-wrapper">
		<div class="col s5 m4">
			<ul class="answer-drop">

			</ul>
		</div>
		<div class="col s7 m8">
			<p class="answer-text-container">
				<span class="answer-text"></span>
				<i class="fas fa-check-circle hidden correct-answer-icon"></i>
				<i class="fas fa-exclamation-triangle hidden wrong-answer-icon"></i>
			</p>
			
		</div>
	</div>
</div>

<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">Modal title</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        ...
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Understood</button>
      </div>
    </div>
  </div>
</div>

{% endblock %}

{% block scripts %}

{# bootstrap toaster doesn't work if document.body not initialized at time of include X_X #}
{% include 'includes/scripts/bootstrap-toaster.twig' %}

<script type="text/javascript">
    $('#question-set').select2({
        theme: 'bootstrap-5',
        placeholder: 'Select a conference...',
        searchInputPlaceholder: 'Search conferences...',
        allowClear: false
    });

    var theme = "{{ prefersDarkMode(app) ? 'dark' : 'light' }}";

    function showToast(title, message, isWarning) {
        Toast.setPlacement(TOAST_PLACEMENT.TOP_RIGHT);
        Toast.setTheme(theme === 'light' ? TOAST_THEME.LIGHT : TOAST_THEME.DARK);
        Toast.create({
            title: title,
            message: message,
            status: isWarning ? TOAST_STATUS.WARNING: TOAST_STATUS.INFO,
            timeout: 5000
        });
    }        

	// https://stackoverflow.com/a/2450976/3938401
	function shuffle(array) {
		let currentIndex = array.length,  randomIndex;
		// While there remain elements to shuffle...
		while (currentIndex != 0) {
			// Pick a remaining element...
			randomIndex = Math.floor(Math.random() * currentIndex);
			currentIndex--;

			// And swap it with the current element.
			[array[currentIndex], array[randomIndex]] = [
			array[randomIndex], array[currentIndex]];
		}
		return array;
	}
    var generateQuizButton = document.getElementById('generate-quiz-button');
    var questionSetSelect = document.getElementById('question-set');
    var numberQuestionsInput = document.getElementById('number');
    var numberSetsInput = document.getElementById('sets');
    
    var matchingQuizContainer = document.getElementById('matching-quiz-container');
    var matchingQuizTemplate = document.getElementById('matching-quiz-template').firstElementChild;
	var quizBankItemTemplate = document.getElementById('quiz-bank-item-template').firstElementChild;
	var answerItemTemplate = document.getElementById('answer-item-template').firstElementChild;
    var sortables = [];

    generateQuizButton.addEventListener('click', function() {
        $.ajax({
            type: "POST",
            url: '{{ app.yurl('/matching-quiz/generate') }}',
            data: {
                questionSet: questionSetSelect.value,
                numberQuestions: numberQuestionsInput.value,
                numberSets: numberSetsInput.value
            },
            success: function(response) {
                if (response.didSucceed) {
                    clearOldQuiz();
                    for (var i = 0; i < response.sets.length; i++) {
                        showQuiz(response.sets[i], i);
                    }
                    // need to redo how the element names are set up and all that, make the quiz thing a template (basically),
                    // draw a dividing line between each set of questions & answers, that sort of thing
                    document.getElementById('matching-quiz-container').classList.remove('hidden');
                    
                } else {
                    showToast('Error!', 'Error creating matching question quiz: ' + response.message, true);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                try {
                    showToast('Error!', xhr.responseJSON.message, true);
                } catch (error) {
                    showToast('Error!', 'Unknown error generating matching quiz. Please make sure you are connected to the internet or try again later.', true);
                }
            }
        });
    });

    function clearOldQuiz() {
        sortables.forEach(function(sortable) {
            sortable.destroy();
        });
        sortables = [];
        matchingQuizContainer.innerHTML = '';
        // quizBankUL.innerHTML = '';
        // answersUL.innerHTML = '';
    }

    function showQuiz(matches, setIdentifier) {
        if (setIdentifier > 0) {
            // add divider between matching sets
            var hr = document.createElement('hr');
            matchingQuizContainer.appendChild(hr);
        }
        // add matching quiz from template
        var matchingQuiz = matchingQuizTemplate.cloneNode(true);
        matchingQuizContainer.appendChild(matchingQuiz);
        // get all the appropriate vars...
        var setTitle = matchingQuiz.querySelector('.set-title');
        setTitle.innerText = setIdentifier + 1;
        var quizBankUL = matchingQuiz.querySelector('.quiz-bank');
        var answersUL = matchingQuiz.querySelector('.answers');
        var checkAnswerButton = matchingQuiz.querySelector('.check-answer-button');
        var resetAnswersButton = matchingQuiz.querySelector('.reset-answers-button');
        // setup attributes for later reference...
        quizBankUL.setAttribute('data-set-id', setIdentifier);
        answersUL.setAttribute('data-set-id', setIdentifier);
        checkAnswerButton.setAttribute('data-set-id', setIdentifier);
        resetAnswersButton.setAttribute('data-set-id', setIdentifier);

        matches.forEach(function(item) {
            // setup quiz option
            var quizBankItem = quizBankItemTemplate.cloneNode(true);
            var li = document.createElement('li');
            li.appendChild(quizBankItem);
            var itemTextSpan = li.querySelector('.item-text');
            if (itemTextSpan !== null) {
                itemTextSpan.innerText = item.question;
            }
            li.classList.add('quiz-list-item');
            li.setAttribute('data-id', item.matchingQuestionItemID);
            li.setAttribute('data-answer', item.answer);
            li.setAttribute('data-set-id', setIdentifier);
            quizBankUL.appendChild(li);
        });
        // shuffle answers and display them
        var shuffledMatches = shuffle(matches);
        shuffledMatches.forEach(function(item) {
            // setup answer 
            var answerItem = answerItemTemplate.cloneNode(true);
            var li = document.createElement('li');
            li.appendChild(answerItem);
            var answerTextSpan = li.querySelector('.answer-text');
            if (answerTextSpan !== null) {
                answerTextSpan.innerText = item.answer;
            }
            li.classList.add('answer-list-item');
            li.setAttribute('data-id', item.matchingQuestionItemID);
            li.setAttribute('data-answer', item.answer);
            li.setAttribute('data-set-id', setIdentifier);
            answersUL.appendChild(li);
        });
        // set up sortables
        var sortableName = 'shared-' + setIdentifier; 
        sortables.push(Sortable.create(quizBankUL, {
            group: {
                name: sortableName
            },
            handle: '.drag-handle',
            ghostClass: 'sortable-drop-placeholder',
            sort: false, // no sorting within list
            onAdd: function (/**Event*/evt) {
                // Element is dropped into the list from another list
                sortQuizBank(evt.from.getAttribute('data-set-id'));
                clearAllCorrectIncorrect(evt.from.getAttribute('data-set-id'));
            },
        }));
        var answerDrops = answersUL.querySelectorAll('.answer-drop');
        answerDrops.forEach(function(item) {
            item.setAttribute('data-set-id', setIdentifier);
            sortables.push(Sortable.create(item, {
                group: {
                    name: sortableName,
                    put: function (to, from) {
                        var hasZeroItems = to.el.children.length < 1; // max 1 item in list
                        return hasZeroItems && from.el.getAttribute('data-set-id') == to.el.getAttribute('data-set-id');
                    }
                },
                handle: '.drag-handle',
                easing: 'cubic-bezier(1, 0, 0, 1)',
                ghostClass: 'sortable-drop-placeholder',
                onSort: function (/**Event*/evt) {
                    // same properties as onEnd
                    clearAllCorrectIncorrect(evt.from.getAttribute('data-set-id'));
                },
                onRemove: function (/**Event*/evt) {
                    // Element is removed from the list into another list
                    // same properties as onEnd
                    clearAllCorrectIncorrect(evt.from.getAttribute('data-set-id'));
                },
            }));
        });
        sortQuizBank(setIdentifier);

        checkAnswerButton.addEventListener('click', function(event) {
            var setID = event.target.getAttribute('data-set-id');
            checkAnswers(setID);
        });

        resetAnswersButton.addEventListener('click', function(event) {
            var setID = event.target.getAttribute('data-set-id');
            resetAnswers(setID);
        });
    }

    function resetAnswers(setIdentifier) {
        if (confirm('Are you sure you want to reset your matches? You can\'t undo this action!')) {
            var answerListItems = matchingQuizContainer.querySelectorAll('.answers[data-set-id="' + setIdentifier + '"] .answer-list-item');
            var quizBankUL = matchingQuizContainer.querySelector('.quiz-bank[data-set-id="' + setIdentifier + '"]');
            answerListItems.forEach(function(answerListItem) {
                var answerItemContainer = answerListItem.querySelector('.answer-item');
                if (answerItemContainer !== null) {
                    // check if user has matched an item at all
                    var quizBankListItem = answerListItem.querySelector('.quiz-list-item');
                    if (quizBankListItem !== null) {
                        quizBankListItem.parentNode.removeChild(quizBankListItem);
                        quizBankUL.appendChild(quizBankListItem);
                    }
                }
            });
            sortQuizBank(setIdentifier);
            clearAllCorrectIncorrect(setIdentifier);
        }
    }

    function sortQuizBank(setIdentifier) {
        var quizBank = matchingQuizContainer.querySelector('.quiz-bank[data-set-id="' + setIdentifier + '"]');
        if (quizBank.children.length > 0) {
            tinysort(quizBank.children, 'span.item-text');
        }
    }

    function clearAllCorrectIncorrect(setIdentifier) {
        var answerListItems = matchingQuizContainer.querySelectorAll('.answers[data-set-id="' + setIdentifier + '"] .answer-list-item');
		answerListItems.forEach(function(answerListItem) {
			var answerItemContainer = answerListItem.querySelector('.answer-item');
			if (answerItemContainer !== null) {
				// clear any old CSS answers
				answerItemContainer.classList.remove('correct-quiz-answer');
				answerItemContainer.querySelector('.correct-answer-icon').classList.add('hidden');
				answerItemContainer.classList.remove('wrong-quiz-answer');
				answerItemContainer.querySelector('.wrong-answer-icon').classList.add('hidden');
            }
        });
    }

	function checkAnswers(setIdentifier) {
		// check answers by looking at the answer <li> vs the quiz bank <li>.
		// if the data-id attribute matches, then the answer is correct :)
        clearAllCorrectIncorrect(setIdentifier);
        var answersUL = matchingQuizContainer.querySelector('.answers[data-set-id="' + setIdentifier + '"]');
		var answerListItems = answersUL.querySelectorAll('.answer-list-item');
		answerListItems.forEach(function(answerListItem) {
			var answerDataID = answerListItem.getAttribute('data-id');
			var answerItemContainer = answerListItem.querySelector('.answer-item');
			if (answerItemContainer !== null) {
				// check if user has matched an item at all
				var quizBankListItem = answerListItem.querySelector('.quiz-list-item');
				if (quizBankListItem === null) {
					// if not matched at all, it's wrong by default
					answerItemContainer.classList.add('wrong-quiz-answer');
					answerItemContainer.querySelector('.wrong-answer-icon').classList.remove('hidden');
				} else {
					// see if answer right
                    // check both id and answer in case 2 answers are the same
					var quizBankDataID = quizBankListItem.getAttribute('data-id');
                    var quizBankAnswer = quizBankListItem.getAttribute('data-answer').trim();
                    var answerItemAnswer = answerListItem.getAttribute('data-answer').trim();
                    //console.log(quizBankDataID, answerDataID);
                    //console.log(quizBankAnswer, answerItemAnswer);
					if ((quizBankDataID !== '-1' && quizBankDataID !== -1 && quizBankDataID === answerDataID) || quizBankAnswer === answerItemAnswer) {
						// answer is right!
						answerItemContainer.classList.add('correct-quiz-answer');
						answerItemContainer.querySelector('.correct-answer-icon').classList.remove('hidden');
					} else {
						answerItemContainer.classList.add('wrong-quiz-answer');
						answerItemContainer.querySelector('.wrong-answer-icon').classList.remove('hidden');
					}
				}
			}
		});
	}
</script>

{% endblock %}